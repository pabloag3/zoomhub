version: 2

defaults: &defaults
    parallelism: 4
    working_directory: ~/zoomhub/zoomhub
    environment:
        CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
        CIRCLE_TEST_REPORTS: /tmp/circleci-test-results

deploy: &deploy
    docker:
        - image: buildpack-deps:trusty
    steps:
      - attach_workspace:
          at: ~/zoomhub/zoomhub/workspace
      - run:
          name: SSH setup
          command: mkdir -p ~/.ssh && ssh-keyscan "$DEPLOY_HOST" >> ~/.ssh/known_hosts
      - run:
          name: Deploy
          command: cd ~/zoomhub/zoomhub/workspace && ./deploy.sh "$DEPLOY_HOST"

jobs:
  build:
    <<: *defaults
    docker:
      # Default CircleCI Docker container image
      # https://circleci.com/docs/2.0/executor-types/
      # - image: buildpack-deps:trusty
      - image: fpco/stack-build
      - image: "circleci/postgres:9.6.5-alpine-ram"
        environment:
          POSTGRES_USER: zoomhub
          POSTGRES_DB: zoomhub_test

    steps:
    - checkout

    - run:
        name: "Setup custom environment variables"
        command: |
          echo 'export PGHOST="localhost"' >> $BASH_ENV
          echo 'export PGPORT="5432"' >> $BASH_ENV
          echo 'export PGUSER="zoomhub"' >> $BASH_ENV
          echo 'export PGDATABASE="zoomhub_test"' >> $BASH_ENV

    - run:
        name: Initialize workspace
        command: mkdir -p workspace
    - run:
        name: Initialize artifact storage
        command: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    - run:
        name: Install psql for preloading data
        command: sudo apt-get update && sudo apt-get install --yes postgresql-client

    # - run: sudo apt-get update
    # - run:
    #     name: Install pgloader
    #     command: sudo apt-get install --yes pgloader

    # Dependencies
    #   This would typically go in either a build or a build-and-test job when
    #   using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        - zh-stack-cache-v1-dep-{{ .Branch }}-{{ checksum "zoomhub.cabal" }}
        # This branch if available
        - zh-stack-cache-v1-dep-{{ .Branch }}-
        # Default branch if not
        - zh-stack-cache-v1-dep-master-
        # Any branch if there are none on the default branch -
        # this should be unnecessary if you have your default branch
        # configured correctly
        - zh-stack-cache-v1-dep-

    # Test
    # - run:
    #     name: Prepare database for test
    #     command: pgloader ./data/zoomhub-development.sqlite3 postgresql://zoomhub@localhost:5432/zoomhub-test-db
    - run:
        name: Run tests
        command: |
          psql $PGDATABASE < ./data/zoomhub_test-pg-dump-2019-10-16-1-schema.sql
          psql $PGDATABASE < ./data/zoomhub_test-pg-dump-2019-10-16-2-data.sql

          stack test --fast --no-terminal

    # - run:
    #     name: Copy coverage reports
    #     command: cp -r $(stack path --local-hpc-root) $CIRCLE_ARTIFACTS

    # - run:
    #     name: Build binary
    #     command: stack build --install-ghc --pedantic --ghc-options="-O2"
    # - run:
    #     name: Create Keter package
    #     command: ./ops/keter-bundle.sh
    # - run:
    #     name: Copy Keter package to artifacts
    #     command: cp zoomhub.keter $CIRCLE_ARTIFACTS
    # - run:
    #     name: Copy Keter package to workspace
    #     command: cp zoomhub.keter workspace
    # - run:
    #     name: Copy deploy script to workspace
    #     command: cp ./ops/deploy.sh workspace

    # - persist_to_workspace:
    #     root: workspace
    #     paths:
    #       - zoomhub.keter
    #       - deploy.sh

    # Save dependency cache
    - save_cache:
        key: zh-stack-cache-v1-dep-{{ .Branch }}-{{ checksum "zoomhub.cabal" }}
        paths:
        - ~/.stack
        - .stack-work

    # # Save test results
    # - store_test_results:
    #     path: /tmp/circleci-test-results

    # # Save artifacts
    # - store_artifacts:
    #     path: /tmp/circleci-artifacts
    # - store_artifacts:
    #     path: /tmp/circleci-test-results

  deploy-staging:
    <<: *defaults
    environment:
        DEPLOY_HOST: staging.zoomhub.net
    <<: *deploy

  deploy-production:
    <<: *defaults
    environment:
        DEPLOY_HOST: zoomhub.net
    <<: *deploy

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only: master
