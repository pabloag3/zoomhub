#!/bin/bash

set -eo pipefail

hosts="ops/$3"
if [ -z "$3" ]; then
  hosts='ops/staging'
fi

# Helpers
separator () {
    echo '------------------------------------------------------------------------------'
}

print_hosts () {
    separator
    echo "Hosts:   $(basename $hosts)"
    separator
}

DEVELOPMENT_DB_NAME='zoomhub_development'
TEST_DB_NAME='zoomhub_test'

# Commands
case "$1" in
init)
    brew install https://raw.githubusercontent.com/Homebrew/homebrew/bda8d64e0e9011aab1612868eac2f709e631c503/Library/Formula/haskell-stack.rb
    stack setup
    ;;
lint)
    stack exec hlint -- src tests
    ;;
format)
    files=$(git ls-files | grep --invert 'vendor/' | grep '.hs$')
    stylish-haskell --inplace $files
    ;;
ops)
    case "$2" in
    bootstrap)
        separator
        echo 'WARNING: Running ./zh ops bootstrap more than once will fail'
        echo '         as `root` user will no longer have password access to '
        echo '         the server.'
        separator
        echo "Hosts:   $(basename $hosts)"
        separator
        echo 'Enter `root` SSH password:'
        ansible-playbook --inventory-file "$hosts" \
            ops/user.yml --user root --ask-pass \
            --extra-vars "sudoers=y username=admin ansible_become_pass='' variable_hosts=${4:-all}"
        ;;
    ping)
        print_hosts
        ansible --inventory-file "$hosts" all -m ping
        ;;
    setup)
        ansible-galaxy install -r ops/requirements.yml
    ;;
    setup-admin-server)
        ansible-playbook -v --inventory-file ops/admin \
            --ask-become --ask-vault-pass \
            ops/admin.yml
        ;;
    setup-database-server)
        print_hosts

        ansible-playbook -v --inventory-file "$hosts" \
            --ask-vault-pass \
            ops/database.yml
        ;;
    setup-web-server)
        print_hosts

        echo 'Enter `admin` user password:'
        ansible-playbook -v --inventory-file "$hosts" \
            --ask-become --ask-vault-pass \
            ops/web.yml
        ;;
    *)
        echo "Unknown command: $0 $@. Try $0 $1 \
bootstrap|ping|setup|setup-admin-server|setup-database-server|setup-web-server"
        exit 1
    esac
    ;;
run)
    dropdb --if-exists "$DEVELOPMENT_DB_NAME"
    createdb "$DEVELOPMENT_DB_NAME"

    stack build --fast --exec "migrate-database $DEVELOPMENT_DB_NAME migrate"

    # NOTE: Preserves existing content IDs:
    DISABLE_PG_TRIGGERS='SET session_replication_role = replica;'
    psql --output /dev/null --quiet "$DEVELOPMENT_DB_NAME" \
      <<< $(echo "$DISABLE_PG_TRIGGERS" && cat ./data/zoomhub_test-pg-dump-2019-10-16-2-data.sql)

    stack build --ghc-options='' \
                --file-watch \
                --fast \
                --exec ./scripts/run-development.sh
    ;;
test)
    dropdb --if-exists "$TEST_DB_NAME"
    createdb "$TEST_DB_NAME"

    stack build --fast --exec "migrate-database $TEST_DB_NAME migrate"

    psql --output /dev/null --quiet "$TEST_DB_NAME" \
      < ./data/zoomhub_test-pg-dump-2019-10-16-2-data.sql

    # See: https://github.com/commercialhaskell/stack/issues/2210
    MODULES="$2"
    PGUSER="$(whoami)" PGDATABASE="$TEST_DB_NAME" \
      stack test --fast --test-arguments '--match "'"$MODULES"'"'
    ;;
db)
    case "$2" in
    dump)
      pg_dump "$DEVELOPMENT_DB_NAME"
      ;;
    *)
        echo "Unknown command: $0 $@. Try $0 $1 dump"
        exit 1
    esac
    ;;

*)
    echo "Unknown command: $0 $@. Try: $0 format|init|lint|ops|run|test"
    ;;
esac
